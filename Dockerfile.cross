# Use the official Rust image as a build stage
FROM --platform=$BUILDPLATFORM rust AS builder

# Define ARGs for target and build platforms
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Set the working directory
WORKDIR /usr/src/ferron

# Copy the source code
COPY . .

# Install packages for cross-compiling software
RUN if ! [ "$BUILDPLATFORM" = "$TARGETPLATFORM" ]; then \
    apt update && \
    case "$TARGETPLATFORM" in \
    "linux/386") apt install -y gcc-i686-linux-gnu ;; \
    "linux/amd64") apt install -y gcc-x86-64-linux-gnu ;; \
    "linux/arm64") apt install -y gcc-aarch64-linux-gnu ;; \
    "linux/arm/v7") apt install -y gcc-arm-linux-gnueabihf ;; \
    "*") echo "Unsupported target platform for cross-compilation: $TARGETPLATFORM" && exit 1 ;; \
    esac \
    fi

# Build the actual application (cache dependencies with BuildKit)
RUN --mount=type=cache,sharing=locked,target=/usr/local/cargo/git \
    --mount=type=cache,sharing=locked,target=/usr/local/cargo/registry \
    --mount=type=cache,sharing=private,target=/usr/src/ferron/target \
    # Determine the target
    TARGET_ARG= && \
    TARGET_PATH="target/release" && \
    if ! [ "$BUILDPLATFORM" = "$TARGETPLATFORM" ]; then \
    TARGET_TRIPLE="" && \
    TARGET_GCC="" && \
    case "$TARGETPLATFORM" in \
    "linux/386") TARGET_TRIPLE="i686-unknown-linux-gnu" && TARGET_GCC="x86-64-linux-gnu-gcc" ;; \
    "linux/amd64") TARGET_TRIPLE="x86_64-unknown-linux-gnu" && TARGET_GCC="i686-linux-gnu-gcc" ;; \
    "linux/arm64") TARGET_TRIPLE="aarch64-unknown-linux-gnu" && TARGET_GCC="aarch64-linux-gnu-gcc" ;; \
    "linux/arm/v7") TARGET_TRIPLE="armv7-unknown-linux-gnueabihf" && TARGET_GCC="arm-linux-gnueabihf-gcc" ;; \
    "*") echo "Unsupported target platform for cross-compilation: $TARGETPLATFORM" && exit 1 ;; \
    esac && \
    # Install the Rustup target
    rustup target add $TARGET_TRIPLE && \
    # Configure Cargo
    echo -e "[target.$TARGET_TRIPLE]\nlinker = \"$TARGET_GCC\"" >> /usr/local/cargo/config && \
    TARGET_PATH="target/$TARGET_TRIPLE/release" && TARGET_ARG="--target $TARGET_TRIPLE"; \
    fi && \
    cargo build --release --features ferron/config-docker-auto $TARGET_ARG && \
    # Copy executables out of the cache
    mkdir .dist && cp $TARGET_PATH/ferron $TARGET_PATH/ferron-passwd $TARGET_PATH/ferron-yaml2kdl .dist

# Use a Distroless base image for the final image
FROM gcr.io/distroless/cc-debian12:nonroot

# Copy the compiled binaries from the builder stage
COPY --from=builder /usr/src/ferron/.dist /usr/sbin

# Switch to "nobody" user to make commands like WORKDIR use the correct owner
USER nobody

# Copy the web server configuration
COPY --chown=nobody ferron-docker.kdl /etc/ferron.kdl

# Copy the web root contents
COPY --chown=nobody wwwroot /var/www/ferron/

# Create a directory where Ferron logs are stored
WORKDIR /var/log/ferron

# Expose the port 80 (used for HTTP)
EXPOSE 80

# Set the command to run the binary
CMD ["/usr/sbin/ferron", "--config-adapter", "docker-auto"]
