---
import FontAwesomeIcon from "../components/FontAwesomeIcon.astro";
import Logo from "./Logo.astro";
import { headerLinks } from "../config.js";
import { faMoon, faBars, faSun, faX } from "@fortawesome/free-solid-svg-icons";
import { faGithub } from "@fortawesome/free-brands-svg-icons";

const pathname = Astro.url.pathname;
const docLinks = Astro.props.docLinks;
---

<header
  class="w-full border-b border-b-border sticky top-0 bg-background z-40 block h-12"
>
  <div class="flex flex-row h-full px-2 py-2 mx-auto max-w-screen-xl">
    <a href="/" class="mx-1.5">
      <span class="sr-only">Ferron logo</span>
      <Logo width={105} height={35} class="inline h-8 w-auto" />
    </a>
    <nav class="grow text-sm">
      <ul class="hidden md:flex h-full mx-2.5 list-none">
        {
          headerLinks.nav.map((navLink) => (
            <li class="flex">
              <a
                href={navLink.href}
                target={navLink.target}
                class={`inline-block self-center ${pathname == navLink.href || (navLink.href != "/" && pathname.indexOf(navLink.href + "/") == 0) ? "bg-accent" : ""} text-inherit px-2 py-1.5 mx-1 rounded-sm hover:bg-accent/60 transition-colors`}
              >
                {navLink.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <span class="self-center whitespace-nowrap">
      <a
        href={headerLinks.github.href}
        target={headerLinks.github.target}
        class="hidden md:inline-block align-middle h-8 w-8 mx-0.5 p-1 bg-inherit text-inherit hover:bg-accent/60 rounded-md transition-colors"
      >
        <span class="sr-only">GitHub</span>
        <FontAwesomeIcon icon={faGithub} class="align-top w-6 h-6" />
      </a><button
        data-theme-selector
        class="inline-block align-middle h-8 w-8 mx-0.5 p-1 bg-inherit text-inherit hover:bg-accent/60 rounded-md transition-colors cursor-pointer"
      >
        <span class="sr-only">Toggle theme</span>
        <FontAwesomeIcon
          icon={faMoon}
          class="hidden dark:inline align-top w-6 h-6"
        />
        <FontAwesomeIcon
          icon={faSun}
          class="inline dark:hidden align-top w-6 h-6"
        />
      </button><button
        data-header-menu-toggle
        class="inline-block md:hidden align-middle h-8 w-8 mx-0.5 p-1 bg-inherit text-inherit hover:bg-accent/60 rounded-md transition-colors"
      >
        <span class="sr-only">Toggle menu</span>
        <FontAwesomeIcon icon={faBars} class="align-top w-6 h-6" />
      </button>
    </span>
  </div>
  <nav
    data-header-menu
    class="block md:hidden bg-background w-full h-full p-2 overflow-auto z-50 fixed top-0 left-full transition-[left] shrink-0 duration-1000"
  >
    <div class="flex flex-row">
      <div class="grow mx-1.5">
        <Logo
          width={105}
          height={35}
          className="inline h-8 w-auto self-center"
        />
      </div>
      <button data-header-menu-close class="inline-block md:hidden self-center">
        <span class="sr-only">Close</span>
        <FontAwesomeIcon
          icon={faX}
          class="inline-block w-8 h-8 py-1 rounded-sm bg-background text-foreground hover:bg-accent/60 hover:text-accent-foreground transition-colors"
        />
      </button>
    </div>
    <ul
      class={`flex ${docLinks ? "flex-row overflow-x-auto" : "flex-col"} my-3 list-none`}
    >
      {
        headerLinks.nav.map((navLink) => (
          <li class={`${docLinks ? "inline" : "block my-1 text-center"}`}>
            <a
              href={navLink.href}
              target={navLink.target}
              class={`inline-block align-middle ${pathname == navLink.href || (navLink.href != "/" && pathname.indexOf(navLink.href + "/") == 0) ? "bg-accent" : ""} text-inherit px-2 py-1 mx-1 rounded-sm hover:bg-accent/60 transition-colors`}
            >
              {navLink.label}
            </a>
          </li>
        ))
      }
      <li
        class={`${Astro.props.docLinks ? "inline" : "block my-1 text-center"}`}
      >
        <a
          href={headerLinks.github.href}
          target={headerLinks.github.target}
          class="whitespace-nowrap inline-block align-middle text-inherit px-2 py-1 h-8 mx-1 rounded-sm hover:bg-accent/60 transition-colors"
        >
          <FontAwesomeIcon
            icon={faGithub}
            class="inline mr-2 align-top w-6 h-6"
          />
          <span class="align-middle">GitHub</span>
        </a>
      </li>
    </ul>
    {
      docLinks ? (
        <ul class={`flex flex-col my-3 list-none`}>
          {docLinks.map(
            (docLink: {
              href: string;
              target: string;
              sub: boolean;
              label: string;
            }) => (
              <li class="block my-1">
                <a
                  href={docLink.href}
                  target={docLink.target || "_self"}
                  class={`${docLink.sub ? "ml-4" : ""} block align-middle ${pathname == docLink.href ? "bg-accent" : ""} text-inherit px-2 py-1 mx-1 rounded-sm hover:bg-accent/60 transition-colors`}
                >
                  {docLink.label}
                </a>
              </li>
            )
          )}
        </ul>
      ) : (
        ""
      )
    }
  </nav>
</header>

<script>
  const areThemesSupported =
    window.CSS &&
    window.CSS.supports &&
    window.CSS.supports("color", "var(--fake-var)");
  const savedTheme = localStorage.getItem("theme");
  const isSystemDark =
    window.matchMedia &&
    window.matchMedia("(prefers-color-scheme: dark)").matches;
  let initialDarkMode = isSystemDark;
  if (savedTheme == "dark") {
    initialDarkMode = true;
  } else if (savedTheme == "light") {
    initialDarkMode = false;
  }
  let isDarkMode = initialDarkMode;

  function updateTheme() {
    document.documentElement.classList.add("disable-css-transitions");
    if (isDarkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    document.documentElement.offsetHeight; // Flush all the CSS changes
    document.documentElement.classList.remove("disable-css-transitions");
  }

  function initializeHeader() {
    let themeSelector = document.querySelector("[data-theme-selector]");
    if (themeSelector) {
      themeSelector.addEventListener("click", (e) => {
        e.preventDefault();
        if (!areThemesSupported) throw new Error("Themes are not supported");
        localStorage.setItem("theme", isDarkMode ? "light" : "dark");
        isDarkMode = !isDarkMode;
        updateTheme();
      });
    }

    updateTheme();

    let menuButton = document.querySelector("[data-header-menu-toggle]");
    let menuClose = document.querySelector("[data-header-menu-close]");
    let menu = document.querySelector("[data-header-menu]");
    if (menuButton) {
      menuButton.addEventListener("click", (e) => {
        e.preventDefault();
        if (menu) {
          menu.classList.replace("left-full", "left-0");
        }
      });
    }
    if (menuClose) {
      menuClose.addEventListener("click", (e) => {
        e.preventDefault();
        if (menu) {
          menu.classList.replace("left-0", "left-full");
        }
      });
    }
  }

  document.addEventListener("astro:after-swap", initializeHeader);

  initializeHeader();
</script>
