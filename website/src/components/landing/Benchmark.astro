---
import { format } from "date-fns";

interface Props {
  data: object[];
  command: string;
  unit: string;
  competitor1: string;
  competitor2: string;
  competitor3: string;
  description: string;
  title: string;
  date: Date;
  higherIsBetter: boolean;
}

const { data, unit, competitor1, competitor2, competitor3 } = Astro.props;
---

<div
  data-slot="card"
  class="text-card-foreground flex flex-col gap-6 rounded-xl py-6 shadow-sm overflow-hidden border border-muted/60 bg-card/60 backdrop-blur-sm"
>
  <div
    data-slot="card-header"
    class="grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6 pb-2"
  >
    <div data-slot="card-title" class="leading-none font-semibold">
      <h3 class="text-lg">{Astro.props.title}</h3>
    </div>
    <div data-slot="card-description" class="text-muted-foreground text-sm">
      {Astro.props.description}
    </div>
  </div>
  <div data-slot="card-content" class="px-6 grow flex flex-col">
    <benchmark-chart
      data-props={JSON.stringify({
        data,
        unit,
        competitor1,
        competitor2,
        competitor3
      })}
      class="min-h-80 grow"
    >
      <!-- Had to use <div> elements for the chart to resize properly -->
      <div class="relative min-h-80 h-full w-full">
        <canvas></canvas>
      </div>
    </benchmark-chart>
    <div class="mt-4 text-center text-sm text-muted-foreground">
      <p>
        {Astro.props.higherIsBetter ? "Higher is better" : "Lower is better"} | Benchmarks
        run on AMD Ryzen 5 8600G, 32GB RAM, with the{" "}
        <code>{Astro.props.command}</code> command{
          Astro.props.date
            ? ` | Benchmarks performed on ${format(Astro.props.date, "MMMM d, yyyy")}`
            : ""
        }
      </p>
    </div>
  </div>
</div>

<script>
  import {
    BarController,
    BarElement,
    Chart,
    CategoryScale,
    LinearScale,
    Legend,
    Tooltip,
    type ChartItem
  } from "chart.js";

  interface BenchmarkData {
    name: string;
    ferron: number;
    competitor1: number;
    competitor2: number;
    competitor3: number;
  }

  Chart.register([
    BarController,
    BarElement,
    CategoryScale,
    LinearScale,
    Legend,
    Tooltip
  ]);

  const style = getComputedStyle(document.body);
  const mutedForegroundColor = style.getPropertyValue("--muted-foreground");
  const borderColor = style.getPropertyValue("--border");
  const primaryColor = style.getPropertyValue("--primary");
  const chart3 = style.getPropertyValue("--chart-3");
  const chart4 = style.getPropertyValue("--chart-4");
  const chart5 = style.getPropertyValue("--chart-5");
  const fontFamily = style.getPropertyValue("--font-funnel-sans");

  class BenchmarkChart extends HTMLElement {
    connectedCallback() {
      const props = JSON.parse(this.dataset.props || "{}");
      const canvas = this.querySelector("canvas");
      Chart.defaults.font.family = fontFamily;
      Chart.defaults.font.size = 14;
      Chart.defaults.color = `hsla(${mutedForegroundColor}, 1)`;
      Chart.defaults.borderColor = `hsla(${borderColor}, 1)`;
      new Chart(canvas as ChartItem, {
        type: "bar",
        data: {
          labels: props.data.map((item: BenchmarkData) => item.name),
          datasets: [
            {
              label: "Ferron",
              data: props.data.map((item: BenchmarkData) => item.ferron),
              backgroundColor: `hsla(${primaryColor}, 1)`
            },
            {
              label: props.competitor1,
              data: props.data.map((item: BenchmarkData) => item.competitor1),
              backgroundColor: `hsla(${chart3}, 1)`
            },
            {
              label: props.competitor2,
              data: props.data.map((item: BenchmarkData) => item.competitor2),
              backgroundColor: `hsla(${chart4}, 1)`
            },
            {
              label: props.competitor3,
              data: props.data.map((item: BenchmarkData) => item.competitor3),
              backgroundColor: `hsla(${chart5}, 1)`
            }
          ]
        },
        options: {
          maintainAspectRatio: false,

          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              grid: {
                display: false
              },
              beginAtZero: true,
              title: {
                display: true,
                text: props.unit
              }
            }
          }
        }
      });
    }
  }

  customElements.define("benchmark-chart", BenchmarkChart);
</script>
